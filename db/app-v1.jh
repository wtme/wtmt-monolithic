

/* Entity for Organization Gateway */
entity Location {
	streetAddress String
	postalCode String
	city String
	stateProvince String
}

entity Department {
    code String required maxlength(50)
	name String required maxlength(100)
    description String
    disabled Boolean
    notes String
    startDate Instant
    endDate Instant
}
entity DepartmentApprove {
	
}
entity ExpenseApprovers {

}
entity Employee {
    code String required maxlength(50)
	fullname String
	email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    personalEmail String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
	phoneNumber String
    mobile String
	dateOfJoining Instant
    gender Gender
    status EmployeeStatus
    employeeNumber String
    dateOfBirth Instant
    note String
}
enum EmployeeStatus {
	ACTIVE, LEFT
}
entity EmployeeType {
	name String
}

entity DepartmentRole {
    code String required maxlength(50)
	name String required maxlength(100)
    description String
}

relationship ManyToOne {
	ExpenseApprovers{user(name)} to Employee
    ExpenseApprovers{department(name)} to Department
    ExpenseApprovers{departmentRole(name)} to DepartmentRole
}
relationship ManyToOne {
	DepartmentApprove{user(name)} to Employee
    DepartmentApprove{department(name)} to Department
    DepartmentApprove{departmentRole(name)} to DepartmentRole
}

enum Gender {
	MALE, FEMALE, OTHER
}
relationship ManyToMany {
	Employee to EmployeeType
}
relationship OneToOne {
	Employee{user(login) required} to User
}

relationship ManyToOne {
    Department{parent} to Department
}

relationship OneToOne {
	Department{location} to Location
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	/**
	* A relationship
	*/
	Department{employee} to
	/**
	* Another side of the same relationship
	*/
	Employee
}

relationship ManyToOne {
	Employee{manager} to Employee
}


/* Entities for Overtime microservices */
entity Overtime {
	code String required maxlength(50)
    details String
    status OvertimeStatus required
    startDate Instant
    endDate Instant
    createdDate Instant
    overtimeInHours BigDecimal
    totalBillableHours BigDecimal
    totalCostingAmount BigDecimal
    note String
    employeeName String
    departmentName String
    departmentCode String
    location String
}
entity OvertimeComment {
	comment String
    createdDate Instant
}
entity OvertimeHistory {
	date Instant
    status OvertimeStatus
}
enum OvertimeStatus {
	DRAFT, SUBMITTED, BILLED, PAYSLIP, COMPLETED, CANCELLED
}
relationship OneToMany {
	Overtime to OvertimeHistory
	Overtime to OvertimeComment
}


// Set pagination options

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
